// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String
  bookings      Booking[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Booking {
  id          String        @id @default(uuid())
  user        User?         @relation(fields: [userId], references: [id])
  userId      String?
  itinerary   Itinerary     @relation(fields: [itineraryId], references: [id])
  itineraryId String
  passengers  Passenger[]
  bookingCode String        @unique
  totalPrice  Float
  status      BookingStatus @default(PENDING)
  bookedAt    DateTime      @default(now())
  payments    Payment[]
}

model Itinerary {
  id       String          @id @default(uuid())
  segments FlightSegment[]
  bookings Booking[]
}

model Fare {
  id              String        @id @default(uuid())
  flightSegment   FlightSegment @relation(fields: [flightSegmentId], references: [id])
  flightSegmentId String

  fareClass       FareClass
  price           Int // in dollars or cents
  refundable      Boolean
  baggageIncluded Int // in kg
  validUntil      DateTime
}

model FlightSegment {
  id           String @id @default(uuid())
  seatCapacity Int

  flightNumber       String     @unique
  departureTime      DateTime
  arrivalTime        DateTime
  departureAirport   Airport    @relation("Departure", fields: [departureAirportId], references: [id])
  departureAirportId String
  arrivalAirport     Airport    @relation("Arrival", fields: [arrivalAirportId], references: [id])
  arrivalAirportId   String
  airline            Airline    @relation(fields: [airlineId], references: [id])
  airlineId          String
  fareClass          FareClass
  seatMapUrl         String?
  itinerary          Itinerary? @relation(fields: [itineraryId], references: [id])
  itineraryId        String?
  tickets            Ticket[]
  fares              Fare[]
  Seat               Seat[]
}

model Passenger {
  id          String    @id @default(uuid())
  booking     Booking   @relation(fields: [bookingId], references: [id])
  bookingId   String
  title       String
  firstName   String
  lastName    String
  dateOfBirth DateTime
  email       String
  phoneNumber String
  passport    String
  // gender      String
  tickets     Ticket[]
  bags        Baggage[]
  meals       Meal[]
}

model Ticket {
  id           String        @id @default(uuid())
  passenger    Passenger     @relation(fields: [passengerId], references: [id])
  passengerId  String
  segment      FlightSegment @relation(fields: [segmentId], references: [id])
  segmentId    String
  ticketNumber String        @unique
  ticketStatus TicketStatus  @default(VALID)
  seat         Seat          @relation(fields: [seatId], references: [id])
  seatId       String        @unique
}

model Seat {
  id          String   @id @default(uuid())
  seatNumber  String
  seatType    SeatType
  isAvailable Boolean  @default(true)
  price       Int

  segment   FlightSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  segmentId String
  ticket    Ticket?

  @@unique([seatNumber, segmentId]) // ensures no duplicates in a flight
}

model Baggage {
  id          String    @id @default(uuid())
  passenger   Passenger @relation(fields: [passengerId], references: [id])
  passengerId String

  type   BaggageType @relation(fields: [typeId], references: [id])
  typeId String
}

model BaggageType {
  id        String    @id @default(uuid())
  name      String    @unique
  maxWeight Float?
  price     Float
  baggages  Baggage[]
}

model Meal {
  id          String    @id @default(uuid())
  passenger   Passenger @relation(fields: [passengerId], references: [id])
  passengerId String

  type   MealType @relation(fields: [typeId], references: [id])
  typeId String
}

model MealType {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  price       Float
  meals       Meal[]
}

model Airport {
  id          String          @id @default(uuid())
  code        String          @unique
  name        String
  city        String
  country     String
  flightsFrom FlightSegment[] @relation("Departure")
  flightsTo   FlightSegment[] @relation("Arrival")
}

model Airline {
  id       String          @id @default(uuid())
  code     String          @unique
  name     String
  segments FlightSegment[]
}

model Payment {
  id        String        @id @default(uuid())
  booking   Booking       @relation(fields: [bookingId], references: [id])
  bookingId String
  amount    Float
  method    PaymentMethod
  paidAt    DateTime
  status    PaymentStatus
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
}

enum TicketStatus {
  VALID
  USED
  CANCELLED
  EXPIRED
}

enum FareClass {
  ECONOMY
  PREMIUM_ECONOMY
  BUSINESS
  FIRST
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum SeatType {
  WINDOW
  MIDDLE
  AISLE
}
